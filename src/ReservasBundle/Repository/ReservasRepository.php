<?php

namespace ReservasBundle\Repository;
use ReservasBundle\Entity\Reservas;

/**
 * ReservasRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReservasRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Función para buscar disponibilidad según fechas
     *
     * @param $fechallegada
     * @param $fechasalida
     * @return array
     */
    public function findDisponibilidad($fechallegada, $fechasalida) {

        $em     = $this->getEntityManager();

        $result = $em->createQueryBuilder()
            ->select('res.id')
            ->from('ReservasBundle:Reservas','res')
            ->where('res.llegada < :fechasalida')
            ->andWhere('res.salida >= :fechallegada')
            ->setParameter('fechallegada', $fechallegada)
            ->setParameter('fechasalida', $fechasalida)
            ->getQuery()
            ->getArrayResult()
        ;

        return $result;
    }

    /**
     * Función que se encarga de crear una reserva
     *
     * @param $llegada
     * @param $salida
     * @param $tipohab
     * @param $tipopens
     * @param $precio
     * @param $nombre
     * @param $apellidos
     * @param $email
     * @param $telefono
     * @param $numadultos
     * @param $numninos
     * @param $numbebes
     * @param $voucher
     * @return null|Reservas
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function createReserva($llegada, $salida, $tipohab, $tipopens,
                                  $precio, $nombre, $apellidos, $email,
                                  $telefono, $numadultos, $numninos, $numbebes, $voucher) {
        $reserva    = new Reservas();
        $reserva->setLlegada(new \DateTime($llegada));
        $reserva->setSalida(new \DateTime($salida));
        $reserva->setTipoHabitacion(strtoupper($tipohab));
        $reserva->setTipoPension(strtoupper($tipopens));
        $reserva->setPrecio($precio);
        $reserva->setNombre(strtoupper($nombre));
        $reserva->setApellidos(strtoupper($apellidos));
        $reserva->setEmail(strtolower($email));
        $reserva->setTelefono($telefono);
        $reserva->setNumAdultos((int)$numadultos);
        $reserva->setNumNinos((int)$numninos);
        $reserva->setNumBebes((int)$numbebes);
        $reserva->setVoucher(strtoupper($voucher));
        if (new \DateTime($llegada) < new \DateTime()) {
            if (new \DateTime($salida) < new \DateTime()) {
                $reserva->setEstado('CHECK-OUT');
            } else {
                $reserva->setEstado('CHECK-IN');
            }
        }

        $em         = $this->getEntityManager();
        $em->persist($reserva);

        if (!$em->flush()) {
            return $reserva;
        } else {
            return null;
        }
    }

    /**
     * Función que realiza la búsqueda de las reservas del usuario
     *
     * @param null $nombre
     * @param null $apellidos
     * @param null $email
     * @param null $voucher
     * @param null $idreserva
     * @return array
     */
    public function findMisReservas($nombre = null, $apellidos = null, $email = null,
                                    $voucher = null, $idreserva = null) {
        $em     = $this->getEntityManager();

        $query = $em->createQueryBuilder()
            ->select('res.id')
            ->addSelect('res.estado')
            ->addSelect('res.llegada')
            ->addSelect('res.salida')
            ->addSelect('res.tipoHabitacion')
            ->addSelect('res.tipoPension')
            ->addSelect('res.precio')
            ->addSelect('res.nombre')
            ->addSelect('res.apellidos')
            ->addSelect('res.email')
            ->addSelect('res.telefono')
            ->addSelect('res.numAdultos')
            ->addSelect('res.numNinos')
            ->addSelect('res.numBebes')
            ->addSelect('res.voucher')
            ->from('ReservasBundle:Reservas','res');

        if (!is_null($idreserva) && $idreserva != '') {
            $query->where('res.id = :idreserva');
            $query->setParameter('idreserva', $idreserva);
        } else {
            if (!is_null($voucher) && $voucher != '' && !is_null($apellidos) && $apellidos != '') {
                $query->where('res.voucher = :voucher');
                $query->andWhere('res.apellidos = :apellidos');
                $query->setParameter('voucher', strtoupper($voucher));
                $query->setParameter('apellidos', strtoupper($apellidos));
            } else {
                if (!is_null($nombre) && $nombre != '' && !is_null($apellidos) && $apellidos != '' && !is_null($email) && $email != '') {
                    $query->where('res.nombre = :nombre');
                    $query->andWhere('res.apellidos = :apellidos');
                    $query->andWhere('res.email = :email');
                    if (!is_null($voucher) && $voucher != '') {
                        $query->andWhere('res.voucher = :voucher');
                        $query->setParameter('voucher', strtoupper($voucher));
                    }
                    $query->setParameter('nombre', strtoupper($nombre));
                    $query->setParameter('apellidos', strtoupper($apellidos));
                    $query->setParameter('email', strtolower($email));
                }
            }
        }

        $result = $query->getQuery()->getArrayResult();

        return $result;
    }

    /**
     * Función para calcular el voucher aleatorio, controlando no repetir sicho voucher
     *
     * @return string
     */
    public function crearCodigo() {
        $codigo     = md5(microtime());
        $em         = $this->getEntityManager();
        $reservas   = $em->getRepository('ReservasBundle:Reservas')->findBy(array('voucher' => $codigo));
        if (count($reservas) == 0) {
            return $codigo;
        } else {
            $this->crearCodigo();
        }
    }
}
